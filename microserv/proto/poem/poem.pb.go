// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poem.proto

/*
Package poem is a generated protocol buffer package.

It is generated from these files:
	poem.proto

It has these top-level messages:
	PoemRecord
	Author
	OneAuthorRequest
	OneAuthorResponse
	PoemInfo
	Status
	EmptyResponse
	OnePoemRequest
	OnePoemResponse
	Rangen
	PoemsRequest
	PoemsResponse
*/
package poem

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PoemRecord struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AuthorId int64  `protobuf:"varint,2,opt,name=authorId" json:"authorId,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *PoemRecord) Reset()                    { *m = PoemRecord{} }
func (m *PoemRecord) String() string            { return proto.CompactTextString(m) }
func (*PoemRecord) ProtoMessage()               {}
func (*PoemRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PoemRecord) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PoemRecord) GetAuthorId() int64 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

func (m *PoemRecord) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PoemRecord) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Author struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Age  int64  `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Sex  int64  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
}

func (m *Author) Reset()                    { *m = Author{} }
func (m *Author) String() string            { return proto.CompactTextString(m) }
func (*Author) ProtoMessage()               {}
func (*Author) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Author) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Author) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Author) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Author) GetSex() int64 {
	if m != nil {
		return m.Sex
	}
	return 0
}

type OneAuthorRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *OneAuthorRequest) Reset()                    { *m = OneAuthorRequest{} }
func (m *OneAuthorRequest) String() string            { return proto.CompactTextString(m) }
func (*OneAuthorRequest) ProtoMessage()               {}
func (*OneAuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OneAuthorRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type OneAuthorResponse struct {
	Stat *Status `protobuf:"bytes,1,opt,name=stat" json:"stat,omitempty"`
	Data *Author `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *OneAuthorResponse) Reset()                    { *m = OneAuthorResponse{} }
func (m *OneAuthorResponse) String() string            { return proto.CompactTextString(m) }
func (*OneAuthorResponse) ProtoMessage()               {}
func (*OneAuthorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OneAuthorResponse) GetStat() *Status {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *OneAuthorResponse) GetData() *Author {
	if m != nil {
		return m.Data
	}
	return nil
}

type PoemInfo struct {
	Id      int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title   string  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content string  `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Author  *Author `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
}

func (m *PoemInfo) Reset()                    { *m = PoemInfo{} }
func (m *PoemInfo) String() string            { return proto.CompactTextString(m) }
func (*PoemInfo) ProtoMessage()               {}
func (*PoemInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PoemInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PoemInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PoemInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PoemInfo) GetAuthor() *Author {
	if m != nil {
		return m.Author
	}
	return nil
}

type Status struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Status) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EmptyResponse struct {
	Stat *Status `protobuf:"bytes,1,opt,name=stat" json:"stat,omitempty"`
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EmptyResponse) GetStat() *Status {
	if m != nil {
		return m.Stat
	}
	return nil
}

type OnePoemRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *OnePoemRequest) Reset()                    { *m = OnePoemRequest{} }
func (m *OnePoemRequest) String() string            { return proto.CompactTextString(m) }
func (*OnePoemRequest) ProtoMessage()               {}
func (*OnePoemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OnePoemRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type OnePoemResponse struct {
	Stat *Status   `protobuf:"bytes,1,opt,name=stat" json:"stat,omitempty"`
	Data *PoemInfo `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *OnePoemResponse) Reset()                    { *m = OnePoemResponse{} }
func (m *OnePoemResponse) String() string            { return proto.CompactTextString(m) }
func (*OnePoemResponse) ProtoMessage()               {}
func (*OnePoemResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OnePoemResponse) GetStat() *Status {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *OnePoemResponse) GetData() *PoemInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type Rangen struct {
	Page int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *Rangen) Reset()                    { *m = Rangen{} }
func (m *Rangen) String() string            { return proto.CompactTextString(m) }
func (*Rangen) ProtoMessage()               {}
func (*Rangen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Rangen) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Rangen) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type PoemsRequest struct {
	Rangen   *Rangen `protobuf:"bytes,1,opt,name=rangen" json:"rangen,omitempty"`
	AuthorId int64   `protobuf:"varint,2,opt,name=authorId" json:"authorId,omitempty"`
	Title    string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
}

func (m *PoemsRequest) Reset()                    { *m = PoemsRequest{} }
func (m *PoemsRequest) String() string            { return proto.CompactTextString(m) }
func (*PoemsRequest) ProtoMessage()               {}
func (*PoemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PoemsRequest) GetRangen() *Rangen {
	if m != nil {
		return m.Rangen
	}
	return nil
}

func (m *PoemsRequest) GetAuthorId() int64 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

func (m *PoemsRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type PoemsResponse struct {
	Stat *Status     `protobuf:"bytes,1,opt,name=stat" json:"stat,omitempty"`
	Data []*PoemInfo `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *PoemsResponse) Reset()                    { *m = PoemsResponse{} }
func (m *PoemsResponse) String() string            { return proto.CompactTextString(m) }
func (*PoemsResponse) ProtoMessage()               {}
func (*PoemsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PoemsResponse) GetStat() *Status {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *PoemsResponse) GetData() []*PoemInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PoemRecord)(nil), "poem.PoemRecord")
	proto.RegisterType((*Author)(nil), "poem.Author")
	proto.RegisterType((*OneAuthorRequest)(nil), "poem.OneAuthorRequest")
	proto.RegisterType((*OneAuthorResponse)(nil), "poem.OneAuthorResponse")
	proto.RegisterType((*PoemInfo)(nil), "poem.PoemInfo")
	proto.RegisterType((*Status)(nil), "poem.Status")
	proto.RegisterType((*EmptyResponse)(nil), "poem.EmptyResponse")
	proto.RegisterType((*OnePoemRequest)(nil), "poem.OnePoemRequest")
	proto.RegisterType((*OnePoemResponse)(nil), "poem.OnePoemResponse")
	proto.RegisterType((*Rangen)(nil), "poem.Rangen")
	proto.RegisterType((*PoemsRequest)(nil), "poem.PoemsRequest")
	proto.RegisterType((*PoemsResponse)(nil), "poem.PoemsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Poem service

type PoemClient interface {
	AddAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*EmptyResponse, error)
	DelAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetOneAuthor(ctx context.Context, in *OneAuthorRequest, opts ...grpc.CallOption) (*OneAuthorResponse, error)
	AddPoem(ctx context.Context, in *PoemRecord, opts ...grpc.CallOption) (*EmptyResponse, error)
	DelPoem(ctx context.Context, in *PoemRecord, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdatePoem(ctx context.Context, in *PoemRecord, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetOnePoem(ctx context.Context, in *OnePoemRequest, opts ...grpc.CallOption) (*OnePoemResponse, error)
	GetPoems(ctx context.Context, in *PoemsRequest, opts ...grpc.CallOption) (*PoemsResponse, error)
}

type poemClient struct {
	cc *grpc.ClientConn
}

func NewPoemClient(cc *grpc.ClientConn) PoemClient {
	return &poemClient{cc}
}

func (c *poemClient) AddAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/AddAuthor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemClient) DelAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/DelAuthor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemClient) UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/UpdateAuthor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemClient) GetOneAuthor(ctx context.Context, in *OneAuthorRequest, opts ...grpc.CallOption) (*OneAuthorResponse, error) {
	out := new(OneAuthorResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/GetOneAuthor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemClient) AddPoem(ctx context.Context, in *PoemRecord, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/AddPoem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemClient) DelPoem(ctx context.Context, in *PoemRecord, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/DelPoem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemClient) UpdatePoem(ctx context.Context, in *PoemRecord, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/UpdatePoem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemClient) GetOnePoem(ctx context.Context, in *OnePoemRequest, opts ...grpc.CallOption) (*OnePoemResponse, error) {
	out := new(OnePoemResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/GetOnePoem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemClient) GetPoems(ctx context.Context, in *PoemsRequest, opts ...grpc.CallOption) (*PoemsResponse, error) {
	out := new(PoemsResponse)
	err := grpc.Invoke(ctx, "/poem.Poem/GetPoems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Poem service

type PoemServer interface {
	AddAuthor(context.Context, *Author) (*EmptyResponse, error)
	DelAuthor(context.Context, *Author) (*EmptyResponse, error)
	UpdateAuthor(context.Context, *Author) (*EmptyResponse, error)
	GetOneAuthor(context.Context, *OneAuthorRequest) (*OneAuthorResponse, error)
	AddPoem(context.Context, *PoemRecord) (*EmptyResponse, error)
	DelPoem(context.Context, *PoemRecord) (*EmptyResponse, error)
	UpdatePoem(context.Context, *PoemRecord) (*EmptyResponse, error)
	GetOnePoem(context.Context, *OnePoemRequest) (*OnePoemResponse, error)
	GetPoems(context.Context, *PoemsRequest) (*PoemsResponse, error)
}

func RegisterPoemServer(s *grpc.Server, srv PoemServer) {
	s.RegisterService(&_Poem_serviceDesc, srv)
}

func _Poem_AddAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).AddAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/AddAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).AddAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poem_DelAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).DelAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/DelAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).DelAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poem_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).UpdateAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poem_GetOneAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).GetOneAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/GetOneAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).GetOneAuthor(ctx, req.(*OneAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poem_AddPoem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoemRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).AddPoem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/AddPoem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).AddPoem(ctx, req.(*PoemRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poem_DelPoem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoemRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).DelPoem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/DelPoem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).DelPoem(ctx, req.(*PoemRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poem_UpdatePoem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoemRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).UpdatePoem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/UpdatePoem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).UpdatePoem(ctx, req.(*PoemRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poem_GetOnePoem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnePoemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).GetOnePoem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/GetOnePoem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).GetOnePoem(ctx, req.(*OnePoemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poem_GetPoems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemServer).GetPoems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poem.Poem/GetPoems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemServer).GetPoems(ctx, req.(*PoemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Poem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poem.Poem",
	HandlerType: (*PoemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuthor",
			Handler:    _Poem_AddAuthor_Handler,
		},
		{
			MethodName: "DelAuthor",
			Handler:    _Poem_DelAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _Poem_UpdateAuthor_Handler,
		},
		{
			MethodName: "GetOneAuthor",
			Handler:    _Poem_GetOneAuthor_Handler,
		},
		{
			MethodName: "AddPoem",
			Handler:    _Poem_AddPoem_Handler,
		},
		{
			MethodName: "DelPoem",
			Handler:    _Poem_DelPoem_Handler,
		},
		{
			MethodName: "UpdatePoem",
			Handler:    _Poem_UpdatePoem_Handler,
		},
		{
			MethodName: "GetOnePoem",
			Handler:    _Poem_GetOnePoem_Handler,
		},
		{
			MethodName: "GetPoems",
			Handler:    _Poem_GetPoems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poem.proto",
}

func init() { proto.RegisterFile("poem.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0x1a, 0x31,
	0x10, 0x0d, 0x2c, 0x5d, 0x60, 0x4a, 0x28, 0x75, 0xd3, 0x76, 0xc5, 0x09, 0x59, 0x39, 0xe4, 0x84,
	0x52, 0xa2, 0x9e, 0x7a, 0x42, 0x4a, 0x15, 0xe5, 0x94, 0xc8, 0x55, 0xd4, 0xb3, 0x8b, 0x27, 0x04,
	0x89, 0xb5, 0xb7, 0xd8, 0x48, 0x6d, 0xff, 0xbb, 0xf7, 0xca, 0x63, 0xef, 0x86, 0x05, 0x21, 0x65,
	0x7b, 0x1b, 0x8f, 0x67, 0xde, 0xf3, 0x7b, 0x1e, 0x1b, 0xa0, 0x30, 0x98, 0x4f, 0x8b, 0x8d, 0x71,
	0x86, 0x75, 0x7c, 0xcc, 0x9f, 0x00, 0xee, 0x0d, 0xe6, 0x02, 0x17, 0x66, 0xa3, 0xd8, 0x10, 0xda,
	0x2b, 0x95, 0xb5, 0x26, 0xad, 0x8b, 0x44, 0xb4, 0x57, 0x8a, 0x8d, 0xa1, 0x27, 0xb7, 0xee, 0xc9,
	0x6c, 0x6e, 0x55, 0xd6, 0xa6, 0x6c, 0xb5, 0x66, 0x67, 0xf0, 0xca, 0xad, 0xdc, 0x1a, 0xb3, 0x64,
	0xd2, 0xba, 0xe8, 0x8b, 0xb0, 0x60, 0x19, 0x74, 0x17, 0x46, 0x3b, 0xd4, 0x2e, 0xeb, 0x50, 0xbe,
	0x5c, 0xf2, 0x7b, 0x48, 0xe7, 0xd4, 0x7b, 0xc0, 0xc2, 0xa0, 0xa3, 0x65, 0x8e, 0xc4, 0xd0, 0x17,
	0x14, 0xb3, 0x11, 0x24, 0x72, 0x19, 0xb0, 0x13, 0xe1, 0x43, 0x9f, 0xb1, 0xf8, 0x8b, 0x50, 0x13,
	0xe1, 0x43, 0xce, 0x61, 0x74, 0xa7, 0x31, 0x80, 0x0a, 0xfc, 0xb9, 0x45, 0xeb, 0xf6, 0xb1, 0xf9,
	0x77, 0x78, 0xbb, 0x53, 0x63, 0x0b, 0xa3, 0x2d, 0xb2, 0x09, 0x74, 0xac, 0x93, 0x8e, 0xca, 0x5e,
	0xcf, 0x06, 0x53, 0x72, 0xe5, 0x9b, 0x93, 0x6e, 0x6b, 0x05, 0xed, 0xf8, 0x0a, 0x25, 0x9d, 0xa4,
	0x23, 0x55, 0x15, 0x11, 0x85, 0x76, 0x78, 0x01, 0x3d, 0x6f, 0xdc, 0xad, 0x7e, 0x34, 0x07, 0x82,
	0x2a, 0x6b, 0xda, 0x47, 0xac, 0x49, 0x6a, 0xd6, 0xb0, 0x73, 0x48, 0x83, 0xad, 0xa4, 0x6e, 0x9f,
	0x2f, 0xee, 0xf1, 0x29, 0xa4, 0xe1, 0x8c, 0xde, 0xb0, 0x85, 0x51, 0x18, 0x19, 0x29, 0xf6, 0xf6,
	0xe4, 0x76, 0x19, 0x19, 0x7d, 0xc8, 0x3f, 0xc1, 0xe9, 0xd7, 0xbc, 0x70, 0xbf, 0x5f, 0x2e, 0x9b,
	0x4f, 0x60, 0x78, 0xa7, 0x31, 0x0c, 0xc4, 0x31, 0x3f, 0xdf, 0x54, 0x15, 0x2f, 0x76, 0x93, 0xd7,
	0xdc, 0x1c, 0x86, 0x8a, 0xd2, 0xbd, 0xe8, 0xe7, 0x25, 0xa4, 0x42, 0xea, 0x25, 0x6a, 0xaf, 0xae,
	0xf0, 0x77, 0x1f, 0xd5, 0xf9, 0xd8, 0xe7, 0xec, 0xea, 0x0f, 0xc6, 0x21, 0xa4, 0x98, 0x3f, 0xc2,
	0xc0, 0x63, 0xd8, 0xf2, 0xa8, 0xe7, 0x90, 0x6e, 0x08, 0xa1, 0x7e, 0x92, 0x80, 0x2a, 0xe2, 0x5e,
	0xf3, 0x91, 0xe6, 0x0f, 0x70, 0x1a, 0x79, 0xfe, 0x43, 0x70, 0x72, 0x4c, 0xf0, 0xec, 0x6f, 0x02,
	0x1d, 0x9f, 0x62, 0x97, 0xd0, 0x9f, 0x2b, 0x15, 0xdf, 0x46, 0xed, 0xea, 0xc7, 0xef, 0xc2, 0xaa,
	0x76, 0x8d, 0xfc, 0xc4, 0x77, 0x5c, 0xe3, 0xba, 0x49, 0xc7, 0x15, 0x0c, 0x1e, 0x0a, 0x25, 0x1d,
	0x36, 0x69, 0x9a, 0xc3, 0xe0, 0x06, 0x5d, 0xf5, 0x7c, 0xd8, 0x87, 0x50, 0xb6, 0xff, 0xe6, 0xc6,
	0x1f, 0x0f, 0xf2, 0x15, 0xc4, 0x0c, 0xba, 0x73, 0xa5, 0x48, 0xe6, 0xe8, 0xd9, 0x85, 0xf0, 0xdb,
	0x1c, 0xa3, 0x9d, 0x41, 0xf7, 0x1a, 0xd7, 0xcd, 0x7a, 0x3e, 0x03, 0x04, 0x7d, 0xcd, 0xda, 0xbe,
	0x00, 0x04, 0x85, 0xd4, 0x76, 0x56, 0xe9, 0xd8, 0x79, 0x01, 0xe3, 0xf7, 0x7b, 0xd9, 0x1d, 0xce,
	0xde, 0x0d, 0x3a, 0x1a, 0x0d, 0xc6, 0x9e, 0x19, 0xcb, 0x79, 0x2c, 0x39, 0x6b, 0xb3, 0xc3, 0x4f,
	0x7e, 0xa4, 0xf4, 0xfd, 0x5e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x6d, 0xe1, 0xb5, 0x8c,
	0x05, 0x00, 0x00,
}
