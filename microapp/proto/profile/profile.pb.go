// Code generated by protoc-gen-go.
// source: profile.proto
// DO NOT EDIT!

/*
Package profile is a generated protocol buffer package.

It is generated from these files:
	profile.proto

It has these top-level messages:
	GetProfileRequest
	GetProfileResponse
*/
package profile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetProfileRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetProfileRequest) Reset()                    { *m = GetProfileRequest{} }
func (m *GetProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProfileRequest) ProtoMessage()               {}
func (*GetProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetProfileRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetProfileResponse struct {
	UserId  int64    `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Company string   `protobuf:"bytes,3,opt,name=company" json:"company,omitempty"`
	Title   string   `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Feeds   [][]byte `protobuf:"bytes,5,rep,name=feeds,proto3" json:"feeds,omitempty"`
}

func (m *GetProfileResponse) Reset()                    { *m = GetProfileResponse{} }
func (m *GetProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProfileResponse) ProtoMessage()               {}
func (*GetProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetProfileResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetProfileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetProfileResponse) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *GetProfileResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetProfileResponse) GetFeeds() [][]byte {
	if m != nil {
		return m.Feeds
	}
	return nil
}

func init() {
	proto.RegisterType((*GetProfileRequest)(nil), "profile.GetProfileRequest")
	proto.RegisterType((*GetProfileResponse)(nil), "profile.GetProfileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Profile service

type ProfileClient interface {
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
}

type profileClient struct {
	cc *grpc.ClientConn
}

func NewProfileClient(cc *grpc.ClientConn) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := grpc.Invoke(ctx, "/profile.Profile/GetProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profile service

type ProfileServer interface {
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
}

func RegisterProfileServer(s *grpc.Server, srv ProfileServer) {
	s.RegisterService(&_Profile_serviceDesc, srv)
}

func _Profile_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profile.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _Profile_GetProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile.proto",
}

func init() { proto.RegisterFile("profile.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xca, 0x4f,
	0xcb, 0xcc, 0x49, 0xd5, 0x03, 0xd2, 0x25, 0xf9, 0x42, 0xec, 0x50, 0xae, 0x92, 0x0e, 0x97, 0xa0,
	0x7b, 0x6a, 0x49, 0x00, 0x84, 0x17, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xce, 0xc5,
	0x5e, 0x5a, 0x9c, 0x5a, 0x14, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1c, 0xc4, 0x06,
	0xe2, 0x7a, 0xa6, 0x28, 0xb5, 0x33, 0x72, 0x09, 0x21, 0x2b, 0x2f, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0xc5, 0xa9, 0x5e, 0x48, 0x88, 0x8b, 0x25, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x09, 0x28, 0xca, 0x19,
	0x04, 0x66, 0x0b, 0x49, 0x70, 0xb1, 0x27, 0xe7, 0xe7, 0x16, 0x24, 0xe6, 0x55, 0x4a, 0x30, 0x83,
	0x85, 0x61, 0x5c, 0x21, 0x11, 0x2e, 0xd6, 0x92, 0xcc, 0x92, 0x9c, 0x54, 0x09, 0x16, 0xb0, 0x38,
	0x84, 0x03, 0x12, 0x4d, 0x4b, 0x4d, 0x4d, 0x29, 0x96, 0x60, 0x55, 0x60, 0xd6, 0xe0, 0x09, 0x82,
	0x70, 0x8c, 0x82, 0xb8, 0xd8, 0xa1, 0xae, 0x10, 0x72, 0xe7, 0xe2, 0x42, 0xb8, 0x49, 0x48, 0x4a,
	0x0f, 0xe6, 0x53, 0x0c, 0x7f, 0x49, 0x49, 0x63, 0x95, 0x83, 0x78, 0x42, 0x89, 0x21, 0x89, 0x0d,
	0x1c, 0x36, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xff, 0xec, 0x4b, 0x2c, 0x01, 0x00,
	0x00,
}
