package test

import (
	"testing"
)

func Test_FindMissA(t *testing.T) {
	res, err = findMissA(10, a_10_empty_case)
	println("a_10_empty_case: ", equalCase(res, hope_10_empty_case, nil))
	res, err = findMissA(10, a_10_3_case)
	println("a_10_3_case: ", equalCase(res, hope_10_3_case, nil))
	res, err = findMissA(10, a_10_5_case)
	println("a_10_5_case: ", equalCase(res, hope_10_5_case, nil))
	res, err = findMissA(10, a_10_8_case)
	println("a_10_8_case: ", equalCase(res, hope_10_8_case, nil))
	res, err = findMissA(10000, a_10000_8_case)
	println("a_10000_8_case: ", equalCase(res, hope_10000_8_case, nil))
	res, err = findMissA(10000, a_10000_500_case)
	println("a_10000_500_case: ", equalCase(res, hope_10000_500_case, nil))
	res, err = findMissA(10000, a_10000_990_case)
	println("a_10000_990_case: ", equalCase(res, hope_10000_990_case, nil))
	res, err = findMissA(10000, a_10000_3333_case)
	println("a_10000_3333_case: ", equalCase(res, hope_10000_3333_case, nil))
	res, err = findMissA(10000, a_10000_9527_case)
	println("a_10000_9527_case: ", equalCase(res, hope_10000_9527_case, nil))
	res, err = findMissA(10, a_10_more_beyond_case)
	println("a_10_more_beyond_case: ", equalCase(res, hope_10_more_beyond_case, err))
	res, err = findMissA(10, a_10_less_beyond_case)
	println("a_10_less_beyond_case: ", equalCase(res, hope_10_less_beyond_case, err))
	res, err = findMissA(10, a_ascend_full_case)
	println("a_ascend_full_case: ", equalCase(res, hope_ascend_full_case, nil))
	res, err = findMissA(10, a_random_full_case)
	println("a_random_full_case: ", equalCase(res, hope_random_full_case, nil))
	res, err = findMissA(10, a_descend_full_case)
	println("a_descend_full_case: ", equalCase(res, hope_descend_full_case, nil))
}

func Test_FindMissB(t *testing.T) {
	res, err = findMissB(10, b_10_empty_case)
	println("b_10_empty_case: ", equalCase(res, hope_10_empty_case, nil))
	res, err = findMissB(10, b_10_3_case)
	println("b_10_3_case: ", equalCase(res, hope_10_3_case, nil))
	res, err = findMissB(10, b_10_5_case)
	println("b_10_5_case: ", equalCase(res, hope_10_5_case, nil))
	res, err = findMissB(10, b_10_8_case)
	println("b_10_8_case: ", equalCase(res, hope_10_8_case, nil))
	res, err = findMissB(10000, b_10000_8_case)
	println("b_10000_8_case: ", equalCase(res, hope_10000_8_case, nil))
	res, err = findMissB(10000, b_10000_500_case)
	println("b_10000_500_case: ", equalCase(res, hope_10000_500_case, nil))
	res, err = findMissB(10000, b_10000_990_case)
	println("b_10000_990_case: ", equalCase(res, hope_10000_990_case, nil))
	res, err = findMissB(10000, b_10000_3333_case)
	println("b_10000_3333_case: ", equalCase(res, hope_10000_3333_case, nil))
	res, err = findMissB(10000, b_10000_9527_case)
	println("b_10000_9527_case: ", equalCase(res, hope_10000_9527_case, nil))
	res, err = findMissB(10, b_10_more_beyond_case)
	println("b_10_more_beyond_case: ", equalCase(res, hope_10_more_beyond_case, err))
	res, err = findMissB(10, b_10_less_beyond_case)
	println("b_10_less_beyond_case: ", equalCase(res, hope_10_less_beyond_case, err))
	res, err = findMissB(10, b_ascend_full_case)
	println("b_ascend_full_case: ", equalCase(res, hope_ascend_full_case, nil))
	res, err = findMissB(10, b_random_full_case)
	println("b_random_full_case: ", equalCase(res, hope_random_full_case, nil))
	res, err = findMissB(10, b_descend_full_case)
	println("b_descend_full_case: ", equalCase(res, hope_descend_full_case, nil))
}

func Test_FindMissC(t *testing.T) {
	res, err = findMissC(10, c_10_empty_case)
	println("c_10_empty_case: ", equalCase(res, hope_10_empty_case, nil))
	res, err = findMissC(10, c_10_3_case)
	println("c_10_3_case: ", equalCase(res, hope_10_3_case, nil))
	res, err = findMissC(10, c_10_5_case)
	println("c_10_5_case: ", equalCase(res, hope_10_5_case, nil))
	res, err = findMissC(10, c_10_8_case)
	println("c_10_8_case: ", equalCase(res, hope_10_8_case, nil))
	res, err = findMissC(10000, c_10000_8_case)
	println("c_10000_8_case: ", equalCase(res, hope_10000_8_case, nil))
	res, err = findMissC(10000, c_10000_500_case)
	println("c_10000_500_case: ", equalCase(res, hope_10000_500_case, nil))
	res, err = findMissC(10000, c_10000_990_case)
	println("c_10000_990_case: ", equalCase(res, hope_10000_990_case, nil))
	res, err = findMissC(10000, c_10000_3333_case)
	println("c_10000_3333_case: ", equalCase(res, hope_10000_3333_case, nil))
	res, err = findMissC(10000, c_10000_9527_case)
	println("c_10000_9527_case: ", equalCase(res, hope_10000_9527_case, nil))
	res, err = findMissC(10, c_10_more_beyond_case)
	println("c_10_more_beyond_case: ", equalCase(res, hope_10_more_beyond_case, err))
	res, err = findMissC(10, c_10_less_beyond_case)
	println("c_10_less_beyond_case: ", equalCase(res, hope_10_less_beyond_case, err))
	res, err = findMissC(10, c_ascend_full_case)
	println("c_ascend_full_case: ", equalCase(res, hope_ascend_full_case, nil))
	res, err = findMissC(10, c_random_full_case)
	println("c_random_full_case: ", equalCase(res, hope_random_full_case, nil))
	res, err = findMissC(10, c_descend_full_case)
	println("c_descend_full_case: ", equalCase(res, hope_descend_full_case, nil))
}
